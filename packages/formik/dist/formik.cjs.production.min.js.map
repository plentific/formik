{"version":3,"file":"formik.cjs.production.min.js","sources":["../src/FormikContext.tsx","../src/utils.ts","../src/Formik.tsx","../src/Form.tsx","../src/connect.tsx","../src/FieldArray.tsx","../src/ErrorMessage.tsx","../src/FastField.tsx","../src/Field.tsx","../src/withFormik.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FormikContextType } from './types';\nimport invariant from 'tiny-warning';\n\nexport const FormikContext = React.createContext<FormikContextType<any>>(\n  undefined as any\n);\nFormikContext.displayName = 'FormikContext';\n\nexport const FormikProvider = FormikContext.Provider;\nexport const FormikConsumer = FormikContext.Consumer;\n\nexport function useFormikContext<Values>() {\n  const formik = React.useContext<FormikContextType<Values>>(FormikContext);\n\n  invariant(\n    !!formik,\n    `Formik context is undefined, please verify you are calling useFormikContext() as child of a <Formik> component.`\n  );\n\n  return formik;\n}\n","import clone from 'lodash/clone';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n// Assertions\n\n/** @private is the value an empty array? */\nexport const isEmptyArray = (value?: any) =>\n  Array.isArray(value) && value.length === 0;\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): obj is Object =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\n// eslint-disable-next-line no-self-compare\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = <T>(value: T | Promise<T>): value is Promise<T> =>\n  isObject(value) && isFunction(value.then);\n\n/** @private is the given object/value a type of synthetic event? */\nexport const isInputEvent = (value: any): value is React.SyntheticEvent<any> =>\n  value && isObject(value) && isObject(value.target);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n\n  // check if path is not in the end\n  if (p !== path.length && !obj) {\n    return def;\n  }\n\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via it's path. If the value at `path`\n * has changed, return a shallow copy of obj with `value` set at `path`.\n * If `value` has not changed, return the original `obj`.\n *\n * Existing objects / arrays along `path` are also shallow copied. Sibling\n * objects along path retain the same internal js reference. Since new\n * objects / arrays are only created along `path`, we can test if anything\n * changed in a nested structure by comparing the object's reference in\n * the old and new object, similar to how russian doll cache invalidation\n * works.\n *\n * In earlier versions of this function, which used cloneDeep, there were\n * issues whereby settings a nested value would mutate the parent\n * instead of creating a new object. `clone` avoids that bug making a\n * shallow copy of the objects along the update path\n * so no object is mutated in place.\n *\n * Before changing this function, please read through the following\n * discussions.\n *\n * @see https://github.com/developit/linkstate\n * @see https://github.com/jaredpalmer/formik/pull/123\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = clone(obj); // this keeps inheritance when obj is a class\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) {\n      resVal = resVal[currentPath] = clone(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete res[pathArray[i]];\n  }\n\n  return res;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n","import deepmerge from 'deepmerge';\nimport isPlainObject from 'lodash/isPlainObject';\nimport cloneDeep from 'lodash/cloneDeep';\nimport * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport invariant from 'tiny-warning';\nimport { FieldConfig } from './Field';\nimport { FormikProvider } from './FormikContext';\nimport {\n  FieldHelperProps,\n  FieldInputProps,\n  FieldMetaProps,\n  FormikConfig,\n  FormikErrors,\n  FormikHandlers,\n  FormikHelpers,\n  FormikProps,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n} from './types';\nimport {\n  getActiveElement,\n  getIn,\n  isEmptyChildren,\n  isFunction,\n  isObject,\n  isPromise,\n  isString,\n  setIn,\n  setNestedObjectValues,\n} from './utils';\n\ntype FormikMessage<Values> =\n  | { type: 'SUBMIT_ATTEMPT' }\n  | { type: 'SUBMIT_FAILURE' }\n  | { type: 'SUBMIT_SUCCESS' }\n  | { type: 'SET_ISVALIDATING'; payload: boolean }\n  | { type: 'SET_ISSUBMITTING'; payload: boolean }\n  | { type: 'SET_VALUES'; payload: Values }\n  | { type: 'SET_FIELD_VALUE'; payload: { field: string; value?: any } }\n  | { type: 'SET_FIELD_TOUCHED'; payload: { field: string; value?: boolean } }\n  | { type: 'SET_FIELD_ERROR'; payload: { field: string; value?: string } }\n  | { type: 'SET_TOUCHED'; payload: FormikTouched<Values> }\n  | { type: 'SET_ERRORS'; payload: FormikErrors<Values> }\n  | { type: 'SET_STATUS'; payload: any }\n  | {\n      type: 'SET_FORMIK_STATE';\n      payload: (s: FormikState<Values>) => FormikState<Values>;\n    }\n  | {\n      type: 'RESET_FORM';\n      payload: FormikState<Values>;\n    };\n\n// State reducer\nfunction formikReducer<Values>(\n  state: FormikState<Values>,\n  msg: FormikMessage<Values>\n) {\n  switch (msg.type) {\n    case 'SET_VALUES':\n      return { ...state, values: msg.payload };\n    case 'SET_TOUCHED':\n      return { ...state, touched: msg.payload };\n    case 'SET_ERRORS':\n      if (isEqual(state.errors, msg.payload)) {\n        return state;\n      }\n\n      return { ...state, errors: msg.payload };\n    case 'SET_STATUS':\n      return { ...state, status: msg.payload };\n    case 'SET_ISSUBMITTING':\n      return { ...state, isSubmitting: msg.payload };\n    case 'SET_ISVALIDATING':\n      return { ...state, isValidating: msg.payload };\n    case 'SET_FIELD_VALUE':\n      return {\n        ...state,\n        values: setIn(state.values, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_TOUCHED':\n      return {\n        ...state,\n        touched: setIn(state.touched, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_ERROR':\n      return {\n        ...state,\n        errors: setIn(state.errors, msg.payload.field, msg.payload.value),\n      };\n    case 'RESET_FORM':\n      return { ...state, ...msg.payload };\n    case 'SET_FORMIK_STATE':\n      return msg.payload(state);\n    case 'SUBMIT_ATTEMPT':\n      return {\n        ...state,\n        touched: setNestedObjectValues<FormikTouched<Values>>(\n          state.values,\n          true\n        ),\n        isSubmitting: true,\n        submitCount: state.submitCount + 1,\n      };\n    case 'SUBMIT_FAILURE':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    case 'SUBMIT_SUCCESS':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    default:\n      return state;\n  }\n}\n\n// Initial empty states // objects\nconst emptyErrors: FormikErrors<unknown> = {};\nconst emptyTouched: FormikTouched<unknown> = {};\n\n// This is an object that contains a map of all registered fields\n// and their validate functions\ninterface FieldRegistry {\n  [field: string]: {\n    validate: (value: any) => string | Promise<string> | undefined;\n  };\n}\n\nexport function useFormik<Values extends FormikValues = FormikValues>({\n  validateOnChange = true,\n  validateOnBlur = true,\n  validateOnMount = false,\n  isInitialValid,\n  enableReinitialize = false,\n  onSubmit,\n  ...rest\n}: FormikConfig<Values>) {\n  const props = {\n    validateOnChange,\n    validateOnBlur,\n    validateOnMount,\n    onSubmit,\n    ...rest,\n  };\n  const initialValues = React.useRef(props.initialValues);\n  const initialErrors = React.useRef(props.initialErrors || emptyErrors);\n  const initialTouched = React.useRef(props.initialTouched || emptyTouched);\n  const initialStatus = React.useRef(props.initialStatus);\n  const isMounted = React.useRef<boolean>(false);\n  const fieldRegistry = React.useRef<FieldRegistry>({});\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        typeof isInitialValid === 'undefined',\n        'isInitialValid has been deprecated and will be removed in future versions of Formik. Please use initialErrors or validateOnMount instead.'\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n\n  const [, setIteration] = React.useState(0);\n  const stateRef = React.useRef<FormikState<Values>>({\n    values: cloneDeep(props.initialValues),\n    errors: cloneDeep(props.initialErrors) || emptyErrors,\n    touched: cloneDeep(props.initialTouched) || emptyTouched,\n    status: cloneDeep(props.initialStatus),\n    isSubmitting: false,\n    isValidating: false,\n    submitCount: 0,\n  });\n\n  const state = stateRef.current;\n\n  const dispatch = React.useCallback((action: FormikMessage<Values>) => {\n    const prev = stateRef.current;\n\n    stateRef.current = formikReducer(prev, action);\n\n    // force rerender\n    if (prev !== stateRef.current) setIteration(x => x + 1);\n  }, []);\n\n  const runValidateHandler = React.useCallback(\n    (\n      values: Values,\n      field?: string\n    ): FormikErrors<Values> | Promise<FormikErrors<Values>> => {\n      const maybePromisedErrors = props.validate?.(values, field);\n      if (!maybePromisedErrors) {\n        // use loose null check here on purpose\n        return emptyErrors;\n      } else if (isPromise(maybePromisedErrors)) {\n        return maybePromisedErrors.then(\n          errors => errors || emptyErrors,\n          actualException => {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Warning: An unhandled error was caught during validation in <Formik validate />`,\n                actualException\n              );\n            }\n\n            return Promise.reject(actualException);\n          }\n        );\n      } else {\n        return maybePromisedErrors;\n      }\n    },\n    [props.validate]\n  );\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  const runValidationSchema = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      const validationSchema = props.validationSchema;\n      const schema = isFunction(validationSchema)\n        ? validationSchema(field)\n        : validationSchema;\n      const promise =\n        field && schema.validateAt\n          ? schema.validateAt(field, values)\n          : validateYupSchema(values, schema);\n      return new Promise((resolve, reject) => {\n        promise.then(\n          () => {\n            resolve(emptyErrors);\n          },\n          (err: any) => {\n            // Yup will throw a validation error if validation fails. We catch those and\n            // resolve them into Formik errors. We can sniff if something is a Yup error\n            // by checking error.name.\n            // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n            if (err.name === 'ValidationError') {\n              resolve(yupToFormErrors(err));\n            } else {\n              // We throw any other errors\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validationSchema />`,\n                  err\n                );\n              }\n\n              reject(err);\n            }\n          }\n        );\n      });\n    },\n    [props.validationSchema]\n  );\n\n  const runSingleFieldLevelValidation = React.useCallback(\n    (field: string, value: void | string) => {\n      return fieldRegistry.current[field].validate(value);\n    },\n    []\n  );\n\n  const runFieldLevelValidations = React.useCallback(\n    (values: Values): FormikErrors<Values> | Promise<FormikErrors<Values>> => {\n      const fieldKeysWithValidation: string[] = Object.keys(\n        fieldRegistry.current\n      ).filter(f => isFunction(fieldRegistry.current[f].validate));\n\n      // Construct an array with all of the field validation functions\n      const fieldValidations = fieldKeysWithValidation.map(f =>\n        runSingleFieldLevelValidation(f, getIn(values, f))\n      );\n\n      const processFieldErrors = (fieldErrorsList: (string | undefined)[]) =>\n        fieldErrorsList.reduce<FormikErrors<Values>>((prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        }, {});\n\n      if (fieldValidations.some(isPromise)) {\n        return Promise.all(fieldValidations).then(processFieldErrors);\n      } else {\n        return processFieldErrors(fieldValidations as (string | undefined)[]);\n      }\n    },\n    [runSingleFieldLevelValidation]\n  );\n\n  // Run all validations and return the result\n  const runAllValidations = React.useCallback(\n    (values: Values) => {\n      const allValidations = [\n        runFieldLevelValidations(values),\n        props.validationSchema ? runValidationSchema(values) : {},\n        props.validate ? runValidateHandler(values) : {},\n      ];\n\n      const processAllValidations = ([\n        fieldErrors,\n        schemaErrors,\n        validateErrors,\n      ]: FormikErrors<Values>[]) => {\n        const combinedErrors = deepmerge.all<FormikErrors<Values>>(\n          [fieldErrors, schemaErrors, validateErrors],\n          { arrayMerge }\n        );\n        return combinedErrors;\n      };\n\n      if (allValidations.some(isPromise)) {\n        return Promise.all(allValidations).then(processAllValidations);\n      } else {\n        return processAllValidations(allValidations);\n      }\n    },\n    [\n      props.validate,\n      props.validationSchema,\n      runFieldLevelValidations,\n      runValidateHandler,\n      runValidationSchema,\n    ]\n  );\n\n  // Run all validations methods and update state accordingly\n  const validateFormWithHighPriority = useEventCallback(\n    (values: Values = state.values) => {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n\n      const processCombinedErrors = (combinedErrors: FormikErrors<Values>) => {\n        if (!!isMounted.current) {\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          dispatch({ type: 'SET_ERRORS', payload: combinedErrors });\n        }\n        return combinedErrors;\n      };\n\n      const maybePromisedErrors = runAllValidations(values);\n      if (isPromise(maybePromisedErrors)) {\n        return maybePromisedErrors.then(processCombinedErrors);\n      } else {\n        return processCombinedErrors(maybePromisedErrors);\n      }\n    }\n  );\n\n  const resetForm = React.useCallback(\n    (nextState?: Partial<FormikState<Values>>) => {\n      const values =\n        nextState && nextState.values\n          ? nextState.values\n          : initialValues.current;\n      const errors =\n        nextState && nextState.errors\n          ? nextState.errors\n          : initialErrors.current\n          ? initialErrors.current\n          : props.initialErrors || {};\n      const touched =\n        nextState && nextState.touched\n          ? nextState.touched\n          : initialTouched.current\n          ? initialTouched.current\n          : props.initialTouched || {};\n      const status =\n        nextState && nextState.status\n          ? nextState.status\n          : initialStatus.current\n          ? initialStatus.current\n          : props.initialStatus;\n      initialValues.current = values;\n      initialErrors.current = errors;\n      initialTouched.current = touched;\n      initialStatus.current = status;\n\n      const dispatchFn = () => {\n        dispatch({\n          type: 'RESET_FORM',\n          payload: {\n            isSubmitting: !!nextState && !!nextState.isSubmitting,\n            errors,\n            touched,\n            status,\n            values,\n            isValidating: !!nextState && !!nextState.isValidating,\n            submitCount:\n              !!nextState &&\n              !!nextState.submitCount &&\n              typeof nextState.submitCount === 'number'\n                ? nextState.submitCount\n                : 0,\n          },\n        });\n      };\n\n      if (props.onReset) {\n        const maybePromisedOnReset = (props.onReset as any)(\n          state.values,\n          imperativeMethods\n        );\n\n        if (isPromise(maybePromisedOnReset)) {\n          (maybePromisedOnReset as Promise<any>).then(dispatchFn);\n        } else {\n          dispatchFn();\n        }\n      } else {\n        dispatchFn();\n      }\n    },\n    [\n      props.initialErrors,\n      props.initialStatus,\n      props.initialTouched,\n      props.onReset,\n    ]\n  );\n\n  // Grouping the effects to it's easier to predict when they run and synchronizing setting isMounted to true, validation on mount and reinitialization\n  React.useEffect(() => {\n    if (isMounted.current === false) {\n      isMounted.current = true;\n\n      if (\n        validateOnMount &&\n        isEqual(initialValues.current, props.initialValues)\n      ) {\n        validateFormWithHighPriority(initialValues.current);\n      }\n    } else if (enableReinitialize) {\n      if (!isEqual(initialValues.current, props.initialValues)) {\n        initialValues.current = props.initialValues;\n        resetForm();\n        if (validateOnMount) {\n          validateFormWithHighPriority(initialValues.current);\n        }\n      }\n      if (!isEqual(initialErrors.current, props.initialErrors || emptyErrors)) {\n        initialErrors.current = props.initialErrors || emptyErrors;\n        dispatch({\n          type: 'SET_ERRORS',\n          payload: props.initialErrors || emptyErrors,\n        });\n      }\n      if (\n        !isEqual(initialTouched.current, props.initialTouched || emptyTouched)\n      ) {\n        initialTouched.current = props.initialTouched || emptyTouched;\n        dispatch({\n          type: 'SET_TOUCHED',\n          payload: props.initialTouched || emptyTouched,\n        });\n      }\n      if (!isEqual(initialStatus.current, props.initialStatus)) {\n        initialStatus.current = props.initialStatus;\n        dispatch({\n          type: 'SET_STATUS',\n          payload: props.initialStatus,\n        });\n      }\n    }\n  }, [\n    enableReinitialize,\n    props.initialValues,\n    props.initialErrors,\n    props.initialStatus,\n    props.initialTouched,\n    resetForm,\n    validateFormWithHighPriority,\n    validateOnMount,\n  ]);\n  // Splitting the mounting reset to its own effect so it is only ever called once: when the component really unmounts\n  // Otherwise it is also called when the effect's dependencies change making the value go back to `false`\n  React.useEffect(\n    () => () => {\n      isMounted.current = false;\n    },\n    []\n  );\n\n  const validateField = useEventCallback((name: string) => {\n    // This will efficiently validate a single field by avoiding state\n    // changes if the validation function is synchronous. It's different from\n    // what is called when using validateForm.\n\n    if (\n      fieldRegistry.current[name] &&\n      isFunction(fieldRegistry.current[name].validate)\n    ) {\n      const value = getIn(state.values, name);\n      const maybePromise = fieldRegistry.current[name].validate(value);\n      if (isPromise(maybePromise)) {\n        // Only flip isValidating if the function is async.\n        dispatch({ type: 'SET_ISVALIDATING', payload: true });\n        return maybePromise\n          .then((x: any) => x)\n          .then((error: string) => {\n            dispatch({\n              type: 'SET_FIELD_ERROR',\n              payload: { field: name, value: error },\n            });\n            dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          });\n      } else {\n        dispatch({\n          type: 'SET_FIELD_ERROR',\n          payload: {\n            field: name,\n            value: maybePromise,\n          },\n        });\n        return maybePromise;\n      }\n    } else if (props.validationSchema) {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runValidationSchema(state.values, name)\n        .then((x: any) => x)\n        .then((error: any) => {\n          dispatch({\n            type: 'SET_FIELD_ERROR',\n            payload: { field: name, value: getIn(error, name) },\n          });\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n        });\n    }\n\n    return;\n  });\n\n  const registerField = React.useCallback((name: string, { validate }: any) => {\n    fieldRegistry.current[name] = {\n      validate,\n    };\n  }, []);\n\n  const unregisterField = React.useCallback((name: string) => {\n    delete fieldRegistry.current[name];\n  }, []);\n\n  const setTouched = useEventCallback(\n    (touched: FormikTouched<Values>, shouldValidate?: boolean) => {\n      dispatch({ type: 'SET_TOUCHED', payload: touched });\n      const willValidate =\n        shouldValidate === undefined ? validateOnBlur : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const setErrors = React.useCallback((errors: FormikErrors<Values>) => {\n    dispatch({ type: 'SET_ERRORS', payload: errors });\n  }, []);\n\n  const setValues = useEventCallback(\n    (values: React.SetStateAction<Values>, shouldValidate?: boolean) => {\n      const resolvedValues = isFunction(values) ? values(state.values) : values;\n\n      dispatch({ type: 'SET_VALUES', payload: resolvedValues });\n      const willValidate =\n        shouldValidate === undefined ? validateOnChange : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(resolvedValues)\n        : Promise.resolve();\n    }\n  );\n\n  const setFieldError = React.useCallback(\n    (field: string, value: string | undefined) => {\n      dispatch({\n        type: 'SET_FIELD_ERROR',\n        payload: { field, value },\n      });\n    },\n    []\n  );\n\n  const setFieldValue = useEventCallback(\n    (field: string, value: any, shouldValidate?: boolean) => {\n      dispatch({\n        type: 'SET_FIELD_VALUE',\n        payload: {\n          field,\n          value,\n        },\n      });\n      const willValidate =\n        shouldValidate === undefined ? validateOnChange : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(setIn(state.values, field, value))\n        : Promise.resolve();\n    }\n  );\n\n  const executeChange = React.useCallback(\n    (eventOrTextValue: string | React.ChangeEvent<any>, maybePath?: string) => {\n      // By default, assume that the first argument is a string. This allows us to use\n      // handleChange with React Native and React Native Web's onChangeText prop which\n      // provides just the value of the input.\n      let field = maybePath;\n      let val = eventOrTextValue;\n      let parsed;\n      // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n      // so we handle like we would a normal HTML change event.\n      if (!isString(eventOrTextValue)) {\n        // If we can, persist the event\n        // @see https://reactjs.org/docs/events.html#event-pooling\n        if ((eventOrTextValue as any).persist) {\n          (eventOrTextValue as React.ChangeEvent<any>).persist();\n        }\n        const target = eventOrTextValue.target\n          ? (eventOrTextValue as React.ChangeEvent<any>).target\n          : (eventOrTextValue as React.ChangeEvent<any>).currentTarget;\n\n        const {\n          type,\n          name,\n          id,\n          value,\n          checked,\n          outerHTML,\n          options,\n          multiple,\n        } = target;\n\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && __DEV__) {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        val = /number|range/.test(type)\n          ? ((parsed = parseFloat(value)), isNaN(parsed) ? '' : parsed)\n          : /checkbox/.test(type) // checkboxes\n          ? getValueForCheckbox(getIn(state.values, field!), checked, value)\n          : options && multiple // <select multiple>\n          ? getSelectedValues(options)\n          : value;\n      }\n\n      if (field) {\n        // Set form fields by name\n        setFieldValue(field, val);\n      }\n    },\n    [setFieldValue, state.values]\n  );\n\n  const handleChange = useEventCallback<FormikHandlers['handleChange']>(\n    (\n      eventOrPath: string | React.ChangeEvent<any>\n    ): void | ((eventOrTextValue: string | React.ChangeEvent<any>) => void) => {\n      if (isString(eventOrPath)) {\n        return event => executeChange(event, eventOrPath);\n      } else {\n        executeChange(eventOrPath);\n      }\n    }\n  );\n\n  const setFieldTouched = useEventCallback(\n    (field: string, touched: boolean = true, shouldValidate?: boolean) => {\n      dispatch({\n        type: 'SET_FIELD_TOUCHED',\n        payload: {\n          field,\n          value: touched,\n        },\n      });\n      const willValidate =\n        shouldValidate === undefined ? validateOnBlur : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const executeBlur = React.useCallback(\n    (e: any, path?: string) => {\n      if (e.persist) {\n        e.persist();\n      }\n      const { name, id, outerHTML } = e.target;\n      const field = path ? path : name ? name : id;\n\n      if (!field && __DEV__) {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handleblur-e-any--void',\n          handlerName: 'handleBlur',\n        });\n      }\n\n      setFieldTouched(field, true);\n    },\n    [setFieldTouched]\n  );\n\n  const handleBlur = useEventCallback<FormikHandlers['handleBlur']>(\n    (eventOrString: any): void | ((e: any) => void) => {\n      if (isString(eventOrString)) {\n        return event => executeBlur(event, eventOrString);\n      } else {\n        executeBlur(eventOrString);\n      }\n    }\n  );\n\n  const setFormikState = React.useCallback(\n    (\n      stateOrCb:\n        | FormikState<Values>\n        | ((state: FormikState<Values>) => FormikState<Values>)\n    ): void => {\n      if (isFunction(stateOrCb)) {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: stateOrCb });\n      } else {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: () => stateOrCb });\n      }\n    },\n    []\n  );\n\n  const setStatus = React.useCallback((status: any) => {\n    dispatch({ type: 'SET_STATUS', payload: status });\n  }, []);\n\n  const setSubmitting = React.useCallback((isSubmitting: boolean) => {\n    dispatch({ type: 'SET_ISSUBMITTING', payload: isSubmitting });\n  }, []);\n\n  const submitForm = useEventCallback(() => {\n    dispatch({ type: 'SUBMIT_ATTEMPT' });\n\n    const processErrors = (combinedErrors: FormikErrors<Values>) => {\n      // In case an error was thrown and passed to the resolved Promise,\n      // `combinedErrors` can be an instance of an Error. We need to check\n      // that and abort the submit.\n      // If we don't do that, calling `Object.keys(new Error())` yields an\n      // empty array, which causes the validation to pass and the form\n      // to be submitted.\n\n      const isInstanceOfError = combinedErrors instanceof Error;\n      const isActuallyValid =\n        !isInstanceOfError && Object.keys(combinedErrors).length === 0;\n      if (isActuallyValid) {\n        // Proceed with submit...\n        //\n        // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and\n        // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.\n        // This would be fine in simple cases, but make it impossible to disable submit\n        // buttons where people use callbacks or promises as side effects (which is basically\n        // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,\n        //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.\n        // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle\n        // cleanup of isSubmitting on behalf of the consumer.\n        let promiseOrUndefined;\n        try {\n          promiseOrUndefined = executeSubmit();\n          // Bail if it's sync, consumer is responsible for cleaning up\n          // via setSubmitting(false)\n          if (promiseOrUndefined === undefined) {\n            return;\n          }\n        } catch (error) {\n          throw error;\n        }\n\n        return Promise.resolve(promiseOrUndefined)\n          .then(result => {\n            if (!!isMounted.current) {\n              dispatch({ type: 'SUBMIT_SUCCESS' });\n            }\n            return result;\n          })\n          .catch(_errors => {\n            if (!!isMounted.current) {\n              dispatch({ type: 'SUBMIT_FAILURE' });\n              // This is a legit error rejected by the onSubmit fn\n              // so we don't want to break the promise chain\n              throw _errors;\n            }\n          });\n      } else if (!!isMounted.current) {\n        // ^^^ Make sure Formik is still mounted before updating state\n        dispatch({ type: 'SUBMIT_FAILURE' });\n        // throw combinedErrors;\n        if (isInstanceOfError) {\n          throw combinedErrors;\n        }\n      }\n      return;\n    };\n\n    const maybePromisedErrors = validateFormWithHighPriority();\n    if (isPromise(maybePromisedErrors)) {\n      return maybePromisedErrors.then(processErrors);\n    } else {\n      return processErrors(maybePromisedErrors);\n    }\n  });\n\n  const handleSubmit = useEventCallback(\n    (e?: React.FormEvent<HTMLFormElement>) => {\n      if (e && e.preventDefault && isFunction(e.preventDefault)) {\n        e.preventDefault();\n      }\n\n      if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n        e.stopPropagation();\n      }\n\n      // Warn if form submission is triggered by a <button> without a\n      // specified `type` attribute during development. This mitigates\n      // a common gotcha in forms with both reset and submit buttons,\n      // where the dev forgets to add type=\"button\" to the reset button.\n      if (__DEV__ && typeof document !== 'undefined') {\n        // Safely get the active element (works with IE)\n        const activeElement = getActiveElement();\n        if (\n          activeElement !== null &&\n          activeElement instanceof HTMLButtonElement\n        ) {\n          invariant(\n            activeElement.attributes &&\n              activeElement.attributes.getNamedItem('type'),\n            'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n          );\n        }\n      }\n\n      const maybePromise = submitForm();\n      if (isPromise(maybePromise)) {\n        maybePromise.catch(reason => {\n          console.warn(\n            `Warning: An unhandled error was caught from submitForm()`,\n            reason\n          );\n        });\n      }\n    }\n  );\n\n  const imperativeMethods: FormikHelpers<Values> = {\n    resetForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setFieldValue,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    setFormikState,\n    submitForm,\n  };\n\n  const executeSubmit = useEventCallback(() => {\n    return onSubmit(state.values, imperativeMethods);\n  });\n\n  const handleReset = useEventCallback(e => {\n    if (e && e.preventDefault && isFunction(e.preventDefault)) {\n      e.preventDefault();\n    }\n\n    if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n      e.stopPropagation();\n    }\n\n    resetForm();\n  });\n\n  const getFieldMeta = React.useCallback(\n    (name: string): FieldMetaProps<any> => {\n      return {\n        value: getIn(state.values, name),\n        error: getIn(state.errors, name),\n        touched: !!getIn(state.touched, name),\n        initialValue: getIn(initialValues.current, name),\n        initialTouched: !!getIn(initialTouched.current, name),\n        initialError: getIn(initialErrors.current, name),\n      };\n    },\n    [state.errors, state.touched, state.values]\n  );\n\n  const getFieldHelpers = React.useCallback(\n    (name: string): FieldHelperProps<any> => {\n      return {\n        setValue: (value: any, shouldValidate?: boolean) =>\n          setFieldValue(name, value, shouldValidate),\n        setTouched: (value: boolean, shouldValidate?: boolean) =>\n          setFieldTouched(name, value, shouldValidate),\n        setError: (value: any) => setFieldError(name, value),\n      };\n    },\n    [setFieldValue, setFieldTouched, setFieldError]\n  );\n\n  const getFieldProps = React.useCallback(\n    (nameOrOptions: string | FieldConfig<any>): FieldInputProps<any> => {\n      const isAnObject = isObject(nameOrOptions);\n      const name = isAnObject\n        ? (nameOrOptions as FieldConfig<any>).name\n        : nameOrOptions;\n      const valueState = getIn(state.values, name);\n\n      const field: FieldInputProps<any> = {\n        name,\n        value: valueState,\n        onChange: handleChange,\n        onBlur: handleBlur,\n      };\n      if (isAnObject) {\n        const {\n          type,\n          value: valueProp, // value is special for checkboxes\n          as: is,\n          multiple,\n        } = nameOrOptions as FieldConfig<any>;\n\n        if (type === 'checkbox') {\n          if (valueProp === undefined) {\n            field.checked = !!valueState;\n          } else {\n            field.checked = !!(\n              Array.isArray(valueState) && ~valueState.indexOf(valueProp)\n            );\n            field.value = valueProp;\n          }\n        } else if (type === 'radio') {\n          field.checked = valueState === valueProp;\n          field.value = valueProp;\n        } else if (is === 'select' && multiple) {\n          field.value = field.value || [];\n          field.multiple = true;\n        }\n      }\n      return field;\n    },\n    [handleBlur, handleChange, state.values]\n  );\n\n  const dirty = React.useMemo(\n    () => !isEqual(initialValues.current, state.values),\n    [initialValues.current, state.values]\n  );\n\n  const isValid = React.useMemo(\n    () =>\n      typeof isInitialValid !== 'undefined'\n        ? dirty\n          ? state.errors && Object.keys(state.errors).length === 0\n          : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: FormikConfig<Values>) => boolean)(props)\n          : (isInitialValid as boolean)\n        : state.errors && Object.keys(state.errors).length === 0,\n    [isInitialValid, dirty, state.errors, props]\n  );\n\n  const ctx = {\n    ...state,\n    initialValues: initialValues.current,\n    initialErrors: initialErrors.current,\n    initialTouched: initialTouched.current,\n    initialStatus: initialStatus.current,\n    handleBlur,\n    handleChange,\n    handleReset,\n    handleSubmit,\n    resetForm,\n    setErrors,\n    setFormikState,\n    setFieldTouched,\n    setFieldValue,\n    setFieldError,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    submitForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    isValid,\n    dirty,\n    unregisterField,\n    registerField,\n    getFieldProps,\n    getFieldMeta,\n    getFieldHelpers,\n    validateOnBlur,\n    validateOnChange,\n    validateOnMount,\n  };\n\n  return ctx;\n}\n\nexport function Formik<\n  Values extends FormikValues = FormikValues,\n  ExtraProps = {}\n>(props: FormikConfig<Values> & ExtraProps) {\n  const formikbag = useFormik<Values>(props);\n  const { component, children, render, innerRef } = props;\n\n  // This allows folks to pass a ref to <Formik />\n  React.useImperativeHandle(innerRef, () => formikbag);\n\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        !props.render,\n        `<Formik render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Formik render={(props) => ...} /> with <Formik>{(props) => ...}</Formik>`\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n  return (\n    <FormikProvider value={formikbag}>\n      {component\n        ? React.createElement(component as any, formikbag)\n        : render\n        ? render(formikbag)\n        : children // children come last, always called\n        ? isFunction(children)\n          ? (children as (bag: FormikProps<Values>) => React.ReactNode)(\n              formikbag as FormikProps<Values>\n            )\n          : !isEmptyChildren(children)\n          ? React.Children.only(children)\n          : null\n        : null}\n    </FormikProvider>\n  );\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.warn(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n    ${htmlContent}\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: FormikErrors<Values> = {};\n  if (yupError.inner) {\n    if (yupError.inner.length === 0) {\n      return setIn(errors, yupError.path, yupError.message);\n    }\n    for (let err of yupError.inner) {\n      if (!getIn(errors, err.path)) {\n        errors = setIn(errors, err.path, err.message);\n      }\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context?: any\n): Promise<Partial<T>> {\n  const normalizedValues: FormikValues = prepareDataForValidation(values);\n\n  return schema[sync ? 'validateSync' : 'validate'](normalizedValues, {\n    abortEarly: false,\n    context: context || normalizedValues,\n  });\n}\n\n/**\n * Recursively prepare values.\n */\nexport function prepareDataForValidation<T extends FormikValues>(\n  values: T\n): FormikValues {\n  let data: FormikValues = Array.isArray(values) ? [] : {};\n  for (let k in values) {\n    if (Object.prototype.hasOwnProperty.call(values, k)) {\n      const key = String(k);\n      if (Array.isArray(values[key]) === true) {\n        data[key] = values[key].map((value: any) => {\n          if (Array.isArray(value) === true || isPlainObject(value)) {\n            return prepareDataForValidation(value);\n          } else {\n            return value !== '' ? value : undefined;\n          }\n        });\n      } else if (isPlainObject(values[key])) {\n        data[key] = prepareDataForValidation(values[key]);\n      } else {\n        data[key] = values[key] !== '' ? values[key] : undefined;\n      }\n    }\n  }\n  return data;\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function merge(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n\n/** Return multi select values based on an array of options */\nfunction getSelectedValues(options: any[]) {\n  return Array.from(options)\n    .filter(el => el.selected)\n    .map(el => el.value);\n}\n\n/** Return the next value for a checkbox */\nfunction getValueForCheckbox(\n  currentValue: string | any[],\n  checked: boolean,\n  valueProp: any\n) {\n  // If the current value was a boolean, return a boolean\n  if (typeof currentValue === 'boolean') {\n    return Boolean(checked);\n  }\n\n  // If the currentValue was not a boolean we want to return an array\n  let currentArrayOfValues = [];\n  let isValueInArray = false;\n  let index = -1;\n\n  if (!Array.isArray(currentValue)) {\n    // eslint-disable-next-line eqeqeq\n    if (!valueProp || valueProp == 'true' || valueProp == 'false') {\n      return Boolean(checked);\n    }\n  } else {\n    // If the current value is already an array, use it\n    currentArrayOfValues = currentValue;\n    index = currentValue.indexOf(valueProp);\n    isValueInArray = index >= 0;\n  }\n\n  // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values\n  if (checked && valueProp && !isValueInArray) {\n    return currentArrayOfValues.concat(valueProp);\n  }\n\n  // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values\n  if (!isValueInArray) {\n    return currentArrayOfValues;\n  }\n\n  // If the checkbox was unchecked and the value is in the array, remove the value and return the array\n  return currentArrayOfValues\n    .slice(0, index)\n    .concat(currentArrayOfValues.slice(index + 1));\n}\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\n// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n    ? React.useLayoutEffect\n    : React.useEffect;\n\nfunction useEventCallback<T extends (...args: any[]) => any>(fn: T): T {\n  const ref: any = React.useRef(fn);\n\n  // we copy a ref to the callback scoped to the current state/props on each render\n  useIsomorphicLayoutEffect(() => {\n    ref.current = fn;\n  });\n\n  return React.useCallback(\n    (...args: any[]) => ref.current.apply(void 0, args),\n    []\n  ) as T;\n}\n","import * as React from 'react';\nimport { useFormikContext } from './FormikContext';\n\nexport type FormikFormProps = Pick<\n  React.FormHTMLAttributes<HTMLFormElement>,\n  Exclude<\n    keyof React.FormHTMLAttributes<HTMLFormElement>,\n    'onReset' | 'onSubmit'\n  >\n>;\n\ntype FormProps = React.ComponentPropsWithoutRef<'form'>;\n\n// @todo tests\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props: FormikFormProps, ref) => {\n    // iOS needs an \"action\" attribute for nice input: https://stackoverflow.com/a/39485162/406725\n    // We default the action to \"#\" in case the preventDefault fails (just updates the URL hash)\n    const { action, ...rest } = props;\n    const _action = action ?? '#';\n    const { handleReset, handleSubmit } = useFormikContext();\n    return (\n      <form\n        onSubmit={handleSubmit}\n        ref={ref}\n        onReset={handleReset}\n        action={_action}\n        {...rest}\n      />\n    );\n  }\n);\n\nForm.displayName = 'Form';\n","import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { FormikContextType } from './types';\nimport { FormikConsumer } from './FormikContext';\nimport invariant from 'tiny-warning';\n\n/**\n * Connect any component to Formik context, and inject as a prop called `formik`;\n * @param Comp React Component\n */\nexport function connect<OuterProps, Values = {}>(\n  Comp: React.ComponentType<OuterProps & { formik: FormikContextType<Values> }>\n) {\n  const C: React.FC<OuterProps> = props => (\n    <FormikConsumer>\n      {formik => {\n        invariant(\n          !!formik,\n          `Formik context is undefined, please verify you are rendering <Form>, <Field>, <FastField>, <FieldArray>, or your custom context-using component as a child of a <Formik> component. Component name: ${Comp.name}`\n        );\n        return <Comp {...props} formik={formik} />;\n      }}\n    </FormikConsumer>\n  );\n\n  const componentDisplayName =\n    Comp.displayName ||\n    Comp.name ||\n    (Comp.constructor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.FC<OuterProps> & {\n    WrappedComponent: typeof Comp;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics(\n    C,\n    Comp as React.ComponentClass<\n      OuterProps & { formik: FormikContextType<Values> }\n    > // cast type to ComponentClass (even if SFC)\n  );\n}\n","import cloneDeep from 'lodash/cloneDeep';\nimport * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport { connect } from './connect';\nimport {\n  FormikContextType,\n  FormikProps,\n  FormikState,\n  SharedRenderProps,\n} from './types';\nimport {\n  getIn,\n  isEmptyArray,\n  isEmptyChildren,\n  isFunction,\n  isObject,\n  setIn,\n} from './utils';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers<T extends any[] = any[]> {\n  /** Imperatively add a value to the end of an array */\n  push<X = T[number]>(obj: X): void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush<X = T[number]>(obj: X): () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert<X = T[number]>(index: number, value: X): void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert<X = T[number]>(index: number, value: X): () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace<X = T[number]>(index: number, value: X): void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace<X = T[number]>(index: number, value: X): () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift<X = T[number]>(value: X): number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift<X = T[number]>(value: X): () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<X = T[number]>(index: number): X | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<X = T[number]>(): X | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = <T,>(array: T[], from: number, to: number) => {\n  const copy = copyArrayLike(array);\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = <T,>(\n  arrayLike: ArrayLike<T>,\n  indexA: number,\n  indexB: number\n) => {\n  const copy = copyArrayLike(arrayLike);\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = <T,>(\n  arrayLike: ArrayLike<T>,\n  index: number,\n  value: T\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = <T,>(\n  arrayLike: ArrayLike<T>,\n  index: number,\n  value: T\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy[index] = value;\n  return copy;\n};\n\nconst copyArrayLike = (arrayLike: ArrayLike<any>) => {\n  if (!arrayLike) {\n    return [];\n  } else if (Array.isArray(arrayLike)) {\n    return [...arrayLike];\n  } else {\n    const maxIndex = Object.keys(arrayLike)\n      .map(key => parseInt(key))\n      .reduce((max, el) => (el > max ? el : max), 0);\n    return Array.from({ ...arrayLike, length: maxIndex + 1 });\n  }\n};\n\nconst createAlterationHandler = (\n  alteration: boolean | Function,\n  defaultFunction: Function\n) => {\n  const fn = typeof alteration === 'function' ? alteration : defaultFunction;\n\n  return (data: any | any[]) => {\n    if (Array.isArray(data) || isObject(data)) {\n      const clone = copyArrayLike(data);\n      return fn(clone);\n    }\n\n    // This can be assumed to be a primitive, which\n    // is a case for top level validation errors\n    return data;\n  };\n};\n\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContextType<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContextType<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    // @todo Fix TS 3.2.1\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  componentDidUpdate(\n    prevProps: FieldArrayConfig & { formik: FormikContextType<Values> }\n  ) {\n    if (\n      this.props.validateOnChange &&\n      this.props.formik.validateOnChange &&\n      !isEqual(\n        getIn(prevProps.formik.values, prevProps.name),\n        getIn(this.props.formik.values, this.props.name)\n      )\n    ) {\n      this.props.formik.validateForm(this.props.formik.values);\n    }\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n\n      formik: { setFormikState },\n    } = this.props;\n\n    setFormikState((prevState: FormikState<any>) => {\n      let updateErrors = createAlterationHandler(alterErrors, fn);\n      let updateTouched = createAlterationHandler(alterTouched, fn);\n\n      // values fn should be executed before updateErrors and updateTouched,\n      // otherwise it causes an error with unshift.\n      let values = setIn(\n        prevState.values,\n        name,\n        fn(getIn(prevState.values, name))\n      );\n\n      let fieldError = alterErrors\n        ? updateErrors(getIn(prevState.errors, name))\n        : undefined;\n      let fieldTouched = alterTouched\n        ? updateTouched(getIn(prevState.touched, name))\n        : undefined;\n\n      if (isEmptyArray(fieldError)) {\n        fieldError = undefined;\n      }\n      if (isEmptyArray(fieldTouched)) {\n        fieldTouched = undefined;\n      }\n\n      return {\n        ...prevState,\n        values,\n        errors: alterErrors\n          ? setIn(prevState.errors, name, fieldError)\n          : prevState.errors,\n        touched: alterTouched\n          ? setIn(prevState.touched, name, fieldTouched)\n          : prevState.touched,\n      };\n    });\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (arrayLike: ArrayLike<any>) => [\n        ...copyArrayLike(arrayLike),\n        cloneDeep(value),\n      ],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n\n        length = arr.length;\n\n        return arr;\n      },\n      (array: any[]) => {\n        return array ? [null, ...array] : [null];\n      },\n      (array: any[]) => {\n        return array ? [null, ...array] : [null];\n      }\n    );\n\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? copyArrayLike(array) : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        // if the array only includes undefined values we have to return an empty array\n        return isFunction(copy.every)\n          ? copy.every(v => v === undefined)\n            ? []\n            : copy\n          : copy;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array.slice();\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n      ? (render as any)(props)\n      : children // children come last, always called\n      ? typeof children === 'function'\n        ? (children as any)(props)\n        : !isEmptyChildren(children)\n        ? React.Children.only(children)\n        : null\n      : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\nimport { FormikContextType } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  id?: string;\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: (errorMessage: string) => React.ReactNode;\n  render?: (errorMessage: string) => React.ReactNode;\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContextType<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContextType<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render)\n          ? render(error)\n          : null\n        : children\n        ? isFunction(children)\n          ? children(error)\n          : null\n        : component\n        ? React.createElement(component, rest as any, error)\n        : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContextType<any> }\n>(ErrorMessageImpl);\n","import * as React from 'react';\n\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContextType,\n  FieldMetaProps,\n  FieldInputProps,\n} from './types';\nimport invariant from 'tiny-warning';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\nimport { FieldConfig } from './Field';\nimport { connect } from './connect';\n\ntype $FixMe = any;\n\nexport interface FastFieldProps<V = any> {\n  field: FieldInputProps<V>;\n  meta: FieldMetaProps<V>;\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport type FastFieldConfig<T> = FieldConfig & {\n  /** Override FastField's default shouldComponentUpdate */\n  shouldUpdate?: (\n    nextProps: T & GenericFieldHTMLAttributes,\n    props: {}\n  ) => boolean;\n};\n\nexport type FastFieldAttributes<T> = GenericFieldHTMLAttributes &\n  FastFieldConfig<T> &\n  T;\n\ntype FastFieldInnerProps<Values = {}, Props = {}> = FastFieldAttributes<\n  Props\n> & { formik: FormikContextType<Values> };\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FastFieldInner<Values = {}, Props = {}> extends React.Component<\n  FastFieldInnerProps<Values, Props>,\n  {}\n> {\n  constructor(props: FastFieldInnerProps<Values, Props>) {\n    super(props);\n    const { render, children, component, as: is, name } = props;\n    invariant(\n      !render,\n      `<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={${name}}>{props => ...}</FastField> instead.`\n    );\n    invariant(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    invariant(\n      !(is && children && isFunction(children)),\n      'You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.'\n    );\n\n    invariant(\n      !(component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    invariant(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n  }\n\n  shouldComponentUpdate(props: FastFieldInnerProps<Values, Props>) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props, this.props);\n    } else if (\n      props.name !== this.props.name ||\n      getIn(props.formik.values, this.props.name) !==\n        getIn(this.props.formik.values, this.props.name) ||\n      getIn(props.formik.errors, this.props.name) !==\n        getIn(this.props.formik.errors, this.props.name) ||\n      getIn(props.formik.touched, this.props.name) !==\n        getIn(this.props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length ||\n      props.formik.isSubmitting !== this.props.formik.isSubmitting\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, {\n      validate: this.props.validate,\n    });\n  }\n\n  componentDidUpdate(prevProps: FastFieldAttributes<Props>) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      as: is,\n      children,\n      component,\n      shouldUpdate,\n      formik,\n      ...props\n    } = this.props as FastFieldInnerProps<Values, Props>;\n\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = formik.getFieldProps({ name, ...props });\n    const meta = {\n      value: getIn(formik.values, name),\n      error: getIn(formik.errors, name),\n      touched: !!getIn(formik.touched, name),\n      initialValue: getIn(formik.initialValues, name),\n      initialTouched: !!getIn(formik.initialTouched, name),\n      initialError: getIn(formik.initialErrors, name),\n    };\n\n    const bag = { field, meta, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FastFieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (component) {\n      // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n      if (typeof component === 'string') {\n        const { innerRef, ...rest } = props;\n        return React.createElement(\n          component,\n          { ref: innerRef, ...field, ...(rest as $FixMe) },\n          children\n        );\n      }\n      // We don't pass `meta` for backwards compat\n      return React.createElement(\n        component as React.ComponentClass<$FixMe>,\n        { field, form: formik, ...props },\n        children\n      );\n    }\n\n    // default to input here so we can check for both `as` and `children` above\n    const asElement = is || 'input';\n\n    if (typeof asElement === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        asElement,\n        { ref: innerRef, ...field, ...(rest as $FixMe) },\n        children\n      );\n    }\n\n    return React.createElement(\n      asElement as React.ComponentClass,\n      { ...field, ...props },\n      children\n    );\n  }\n}\n\nexport const FastField = connect<FastFieldAttributes<any>, any>(FastFieldInner);\n","import * as React from 'react';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FieldMetaProps,\n  FieldHelperProps,\n  FieldInputProps,\n  FieldValidator,\n} from './types';\nimport { useFormikContext } from './FormikContext';\nimport { isFunction, isEmptyChildren, isObject } from './utils';\nimport invariant from 'tiny-warning';\n\nexport interface FieldProps<V = any, FormValues = any> {\n  field: FieldInputProps<V>;\n  form: FormikProps<FormValues>; // if ppl want to restrict this for a given form, let them.\n  meta: FieldMetaProps<V>;\n}\n\nexport interface FieldConfig<V = any> {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n  | string\n  | React.ComponentType<FieldProps<V>>\n  | React.ComponentType\n  | React.ForwardRefExoticComponent<any>;\n\n  /**\n   * Component to render. Can either be a string e.g. 'select', 'input', or 'textarea', or a component.\n   */\n  as?:\n  | React.ComponentType<FieldProps<V>['field']>\n  | string\n  | React.ComponentType\n  | React.ForwardRefExoticComponent<any>;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   * @deprecated\n   */\n  render?: (props: FieldProps<V>) => React.ReactNode;\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?: ((props: FieldProps<V>) => React.ReactNode) | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: FieldValidator;\n\n  /**\n   * Used for 'select' and related input types.\n   */\n  multiple?: boolean;\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FieldAttributes<T> = { className?: string; } & GenericFieldHTMLAttributes &\n  FieldConfig<T> &\n  T & {\n    name: string,\n  };\n\nexport type FieldHookConfig<T> = GenericFieldHTMLAttributes & FieldConfig<T>;\n\nexport function useField<Val = any>(\n  propsOrFieldName: string | FieldHookConfig<Val>\n): [FieldInputProps<Val>, FieldMetaProps<Val>, FieldHelperProps<Val>] {\n  const formik = useFormikContext();\n  const {\n    getFieldProps,\n    getFieldMeta,\n    getFieldHelpers,\n    registerField,\n    unregisterField,\n  } = formik;\n\n  const isAnObject = isObject(propsOrFieldName);\n\n  // Normalize propsOrFieldName to FieldHookConfig<Val>\n  const props: FieldHookConfig<Val> = isAnObject\n    ? (propsOrFieldName as FieldHookConfig<Val>)\n    : { name: propsOrFieldName as string };\n\n  const { name: fieldName, validate: validateFn } = props;\n\n  React.useEffect(() => {\n    if (fieldName) {\n      registerField(fieldName, {\n        validate: validateFn,\n      });\n    }\n    return () => {\n      if (fieldName) {\n        unregisterField(fieldName);\n      }\n    };\n  }, [registerField, unregisterField, fieldName, validateFn]);\n\n  if (__DEV__) {\n    invariant(\n      formik,\n      'useField() / <Field /> must be used underneath a <Formik> component or withFormik() higher order component'\n    );\n  }\n\n  invariant(\n    fieldName,\n    'Invalid field name. Either pass `useField` a string or an object containing a `name` key.'\n  );\n\n  const fieldHelpers = React.useMemo(() => getFieldHelpers(fieldName), [\n    getFieldHelpers,\n    fieldName,\n  ]);\n\n  return [getFieldProps(props), getFieldMeta(fieldName), fieldHelpers];\n}\n\nexport function Field({\n  validate,\n  name,\n  render,\n  children,\n  as: is, // `as` is reserved in typescript lol\n  component,\n  className,\n  ...props\n}: FieldAttributes<any>) {\n  const {\n    validate: _validate,\n    validationSchema: _validationSchema,\n\n    ...formik\n  } = useFormikContext();\n\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        !render,\n        `<Field render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Field name=\"${name}\" render={({field, form}) => ...} /> with <Field name=\"${name}\">{({field, form, meta}) => ...}</Field>`\n      );\n\n      invariant(\n        !(is && children && isFunction(children)),\n        'You should not use <Field as> and <Field children> as a function in the same <Field> component; <Field as> will be ignored.'\n      );\n\n      invariant(\n        !(component && children && isFunction(children)),\n        'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.'\n      );\n\n      invariant(\n        !(render && children && !isEmptyChildren(children)),\n        'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n\n  // Register field and field-level validation with parent <Formik>\n  const { registerField, unregisterField } = formik;\n  React.useEffect(() => {\n    registerField(name, {\n      validate: validate,\n    });\n    return () => {\n      unregisterField(name);\n    };\n  }, [registerField, unregisterField, name, validate]);\n  const field = formik.getFieldProps({ name, ...props });\n  const meta = formik.getFieldMeta(name);\n  const legacyBag = { field, form: formik };\n\n  if (render) {\n    return render({ ...legacyBag, meta });\n  }\n\n  if (isFunction(children)) {\n    return children({ ...legacyBag, meta });\n  }\n\n  if (component) {\n    // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        component,\n        { ref: innerRef, ...field, ...rest, className },\n        children\n      );\n    }\n    // We don't pass `meta` for backwards compat\n    return React.createElement(\n      component,\n      { field, form: formik, ...props, className },\n      children\n    );\n  }\n\n  // default to input here so we can check for both `as` and `children` above\n  const asElement = is || 'input';\n\n  if (typeof asElement === 'string') {\n    const { innerRef, ...rest } = props;\n    return React.createElement(\n      asElement,\n      { ref: innerRef, ...field, ...rest, className },\n      children\n    );\n  }\n\n  return React.createElement(asElement, { ...field, ...props, className }, children);\n}\n","import hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { Formik } from './Formik';\nimport {\n  FormikHelpers,\n  FormikProps,\n  FormikSharedConfig,\n  FormikValues,\n  FormikTouched,\n  FormikErrors,\n} from './types';\nimport { isFunction } from './utils';\n\n/**\n * State, handlers, and helpers injected as props into the wrapped form component.\n * Used with withFormik()\n *\n * @deprecated  Use `OuterProps & FormikProps<Values>` instead.\n */\nexport type InjectedFormikProps<Props, Values> = Props & FormikProps<Values>;\n\n/**\n * Formik helpers + { props }\n */\nexport type FormikBag<P, V> = { props: P } & FormikHelpers<V>;\n\n/**\n * withFormik() configuration options. Backwards compatible.\n */\nexport interface WithFormikConfig<\n  Props,\n  Values extends FormikValues = FormikValues,\n  DeprecatedPayload = Values\n> extends FormikSharedConfig<Props> {\n  /**\n   * Set the display name of the component. Useful for React DevTools.\n   */\n  displayName?: string;\n\n  /**\n   * Submission handler\n   */\n  handleSubmit: (values: Values, formikBag: FormikBag<Props, Values>) => void;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToValues?: (props: Props) => Values;\n\n  /**\n   * Map props to the form status\n   */\n  mapPropsToStatus?: (props: Props) => any;\n\n  /**\n   * Map props to the form touched state\n   */\n  mapPropsToTouched?: (props: Props) => FormikTouched<Values>;\n\n  /**\n   * Map props to the form errors state\n   */\n  mapPropsToErrors?: (props: Props) => FormikErrors<Values>;\n\n  /**\n   * @deprecated in 0.9.0 (but needed to break TS types)\n   */\n  mapValuesToPayload?: (values: Values) => DeprecatedPayload;\n\n  /**\n   * A Yup Schema or a function that returns a Yup schema\n   */\n  validationSchema?: any | ((props: Props) => any);\n\n  /**\n   * Validation function. Must return an error object or promise that\n   * throws an error object where that object keys map to corresponding value.\n   */\n  validate?: (values: Values, props: Props) => void | object | Promise<any>;\n}\n\nexport type CompositeComponent<P> =\n  | React.ComponentClass<P>\n  | React.FunctionComponent<P>;\n\nexport interface ComponentDecorator<TOwnProps, TMergedProps> {\n  (component: CompositeComponent<TMergedProps>): React.ComponentType<TOwnProps>;\n}\n\nexport interface InferableComponentDecorator<TOwnProps> {\n  <T extends CompositeComponent<TOwnProps>>(component: T): T;\n}\n\n/**\n * A public higher-order component to access the imperative API\n */\nexport function withFormik<\n  OuterProps extends object,\n  Values extends FormikValues,\n  Payload = Values\n>({\n  mapPropsToValues = (vanillaProps: OuterProps): Values => {\n    let val: Values = {} as Values;\n    for (let k in vanillaProps) {\n      if (\n        vanillaProps.hasOwnProperty(k) &&\n        typeof vanillaProps[k] !== 'function'\n      ) {\n        // @todo TypeScript fix\n        (val as any)[k] = vanillaProps[k];\n      }\n    }\n    return val as Values;\n  },\n  ...config\n}: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<\n  OuterProps,\n  OuterProps & FormikProps<Values>\n> {\n  return function createFormik(\n    Component: CompositeComponent<OuterProps & FormikProps<Values>>\n  ): React.ComponentClass<OuterProps> {\n    const componentDisplayName =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor && Component.constructor.name) ||\n      'Component';\n    /**\n     * We need to use closures here for to provide the wrapped component's props to\n     * the respective withFormik config methods.\n     */\n    class C extends React.Component<OuterProps, {}> {\n      static displayName = `WithFormik(${componentDisplayName})`;\n\n      validate = (values: Values): void | object | Promise<any> => {\n        return config.validate!(values, this.props);\n      };\n\n      validationSchema = () => {\n        return isFunction(config.validationSchema)\n          ? config.validationSchema!(this.props)\n          : config.validationSchema;\n      };\n\n      handleSubmit = (values: Values, actions: FormikHelpers<Values>) => {\n        return config.handleSubmit(values, {\n          ...actions,\n          props: this.props,\n        });\n      };\n\n      /**\n       * Just avoiding a render callback for perf here\n       */\n      renderFormComponent = (formikProps: FormikProps<Values>) => {\n        return <Component {...this.props} {...formikProps} />;\n      };\n\n      render() {\n        const { children, ...props } = this.props as any;\n        return (\n          <Formik\n            {...props}\n            {...config}\n            validate={config.validate && this.validate}\n            validationSchema={config.validationSchema && this.validationSchema}\n            initialValues={mapPropsToValues(this.props)}\n            initialStatus={\n              config.mapPropsToStatus && config.mapPropsToStatus(this.props)\n            }\n            initialErrors={\n              config.mapPropsToErrors && config.mapPropsToErrors(this.props)\n            }\n            initialTouched={\n              config.mapPropsToTouched && config.mapPropsToTouched(this.props)\n            }\n            onSubmit={this.handleSubmit as any}\n            children={this.renderFormComponent}\n          />\n        );\n      }\n    }\n\n    return hoistNonReactStatics(\n      C,\n      Component as React.ComponentClass<OuterProps & FormikProps<Values>> // cast type to ComponentClass (even if SFC)\n    ) as React.ComponentClass<OuterProps>;\n  };\n}\n"],"names":["FormikContext","React","undefined","displayName","FormikProvider","Provider","FormikConsumer","Consumer","useFormikContext","formik","invariant","isEmptyArray","value","Array","isArray","length","isFunction","obj","isObject","isInteger","String","Math","floor","Number","isString","Object","prototype","toString","call","isEmptyChildren","children","count","isPromise","then","getIn","key","def","p","path","toPath","setIn","res","clone","resVal","i","pathArray","currentPath","currentObj","slice","nextPath","setNestedObjectValues","object","visited","response","WeakMap","keys","k","val","get","set","emptyErrors","emptyTouched","useFormik","validateOnChange","validateOnBlur","validateOnMount","isInitialValid","enableReinitialize","onSubmit","rest","props","initialValues","initialErrors","initialTouched","initialStatus","isMounted","fieldRegistry","setIteration","stateRef","values","cloneDeep","errors","touched","status","isSubmitting","isValidating","submitCount","state","current","dispatch","action","prev","msg","type","payload","isEqual","field","formikReducer","x","runValidateHandler","maybePromisedErrors","validate","actualException","Promise","reject","runValidationSchema","validationSchema","schema","promise","validateAt","validateYupSchema","resolve","err","name","yupToFormErrors","runSingleFieldLevelValidation","runFieldLevelValidations","fieldKeysWithValidation","filter","f","fieldValidations","map","processFieldErrors","fieldErrorsList","reduce","curr","index","some","all","runAllValidations","allValidations","processAllValidations","deepmerge","arrayMerge","validateFormWithHighPriority","useEventCallback","processCombinedErrors","combinedErrors","resetForm","nextState","dispatchFn","onReset","maybePromisedOnReset","imperativeMethods","validateField","maybePromise","error","registerField","unregisterField","setTouched","shouldValidate","setErrors","setValues","resolvedValues","setFieldError","setFieldValue","executeChange","eventOrTextValue","maybePath","parsed","persist","target","currentTarget","checked","options","multiple","id","test","parseFloat","isNaN","currentValue","valueProp","Boolean","currentArrayOfValues","isValueInArray","indexOf","concat","getValueForCheckbox","from","el","selected","getSelectedValues","handleChange","eventOrPath","event","setFieldTouched","executeBlur","e","handleBlur","eventOrString","setFormikState","stateOrCb","setStatus","setSubmitting","submitForm","processErrors","isInstanceOfError","Error","promiseOrUndefined","executeSubmit","result","_errors","handleSubmit","preventDefault","stopPropagation","reason","console","warn","validateForm","handleReset","getFieldMeta","initialValue","initialError","getFieldHelpers","setValue","setError","getFieldProps","nameOrOptions","isAnObject","valueState","onChange","onBlur","is","as","dirty","isValid","Formik","formikbag","component","render","innerRef","only","yupError","inner","message","sync","context","normalizedValues","prepareDataForValidation","abortEarly","data","hasOwnProperty","isPlainObject","source","destination","forEach","shouldClone","isMergeableObject","push","useIsomorphicLayoutEffect","window","document","createElement","fn","ref","args","apply","Form","_action","connect","Comp","C","componentDisplayName","constructor","WrappedComponent","hoistNonReactStatics","move","array","to","copy","copyArrayLike","splice","swap","arrayLike","indexA","indexB","a","insert","replace","maxIndex","parseInt","max","createAlterationHandler","alteration","defaultFunction","FieldArrayInner","updateArrayField","alterTouched","alterErrors","_this","prevState","updateErrors","updateTouched","fieldError","fieldTouched","handlePush","handleSwap","handleMove","handleInsert","handleReplace","unshift","arr","handleUnshift","handleRemove","remove","handlePop","pop","bind","componentDidUpdate","prevProps","this","every","v","tmp","form","defaultProps","FieldArray","ErrorMessage","shouldComponentUpdate","touch","FastField","shouldUpdate","componentDidMount","componentWillUnmount","restOfFormik","bag","meta","asElement","className","_validate","legacyBag","doc","activeElement","body","propsOrFieldName","fieldName","validateFn","fieldHelpers","mapPropsToValues","vanillaProps","config","Component","actions","renderFormComponent","formikProps","mapPropsToStatus","mapPropsToErrors","mapPropsToTouched"],"mappings":"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"}